#!/usr/bin/env python
# coding: utf-8

# [반복문 제어]
# 1.break로 반복문 제어하기
#  i)break: 제어 흐름 중단.
#  ii)while + break
# i = 0
# while True:    # 무한 루프
#     print(i)
#     i += 1          # i를 1씩 증가시킴
#     if i == 100:    # i가 100일 때
#         break       # 반복문을 끝냄. while의 제어흐름을 벗어남
#         
#   iii)for + break
#   
# for i in range(10000):    # 0부터 9999까지 반복
#     print(i)
#     if i == 100:    # i가 100일 때
#         break       # 반복문을 끝냄. for의 제어흐름을 벗어남  
#         
# 2. continue로 코드 실행 건너 뛰기
#  i)제어 흐름유지. 코드 실행만 건너뜀
#  ii)for + continue
# for i in range(100):       # 0부터 99까지 증가하면서 100번 반복
#     if i % 2 == 0:         # i를 2로 나누었을 때 나머지가 0면 짝수
#         continue           # 아래 코드를 실행하지 않고 건너뜀
#     print(i)
#     
#   iii)
# i = 0
# while i < 100:        # i가 100보다 작을 때 반복. 0부터 99까지 증가하면서 100번 반복
#     i += 1            # i를 1씩 증가시킴
#     if i % 2 == 0:    # i를 2로 나누었을 때 나머지가 0이면 짝수
#         continue      # 아래 코드를 실행하지 않고 건너뜀
#     print(i)
#     
# [계단식으로 별 출력하기]
# https://dojang.io/pluginfile.php/13649/mod_page/content/2/019001.png
# 
# for i in range(5):          # 5번 반복. 바깥쪽 루프는 세로 방향
#     for j in range(5):      # 5번 반복. 안쪽 루프는 가로 방향
#         print('j:', j, sep='', end=' ')    # j값 출력. end에 ' '를 지정하여 줄바꿈 대신 한 칸 띄움
#     print('i:', i, '\\n', sep='')    # i값 출력, 개행 문자 모양도 출력
#                                      # 가로 방향으로 숫자를 모두 출력한 뒤 다음 줄로 넘어감
#                                      # (print는 기본적으로 출력 후 다음 줄로 넘어감)

# # [리스트와 튜플 응용하기]
# 1)리스트 조작.
# : 메서드로 한다(객체에 속한 함수)
# :리스트.append()-요소 하나를 추가
# :리스트.extend()-리스트를 연결하여 확장
# :리스트.insert()-특정 인덱스에 요소 추가
# :리스트.pop()-마지막 요소 또는 특정 인덱스의요소를삭제
# :리스트.remove()-특정 값을 찾아서 삭제
# :리스트.index()-리스트에서 특정 값의 인덱스 구학
# :리스트.count()-특정 값의 개수 구하기
# :리스트.reverse()-리스트에서 요소의 순서를 반대로 뒤집
# :리스트.sort()-오름차순 정렬.
# :리스트.sort(reverse=True):내림차순 정렬
# :sorted():정렬.
# :리스트.clear()-리스트의 모든 요소 삭제
# :메서드 사용않고 슬라이스로 조작.
# ex)
# >>> a = [10, 20, 30]
# >>> a[len(a):] = [500]
# >>> a
# [10, 20, 30, 500]
# 
# :a=b-할당
# :리스트.copy() -복사
# 
# [반복문으로 요소 출력]
# i)
# 
# 리스트
# for 변수 in 리스트:
#     반복할코드
# 
# ii)
# >>> a = [38, 21, 53, 62, 19]
# >>> i = 0
# >>> while i < len(a):
# ...     print(a[i])
# ...     i += 1
# ...
# 
# [인덱스와 요소 출력]
# 리스트
# for 인덱스, 요소 in enumerate(리스트):
#     print(인덱스,요소)
#     
# [가장 작은 수와 가장 큰 수 구하기]
# 
# i)
# >>> a = [38, 21, 53, 62, 19]
# >>> smallest = a[0]
# >>> for i in a:
# ...     if i < smallest:
# ...         smallest = i
# ...
# >>> smallest
# 19
# 
# i +)
# >>> a = [38, 21, 53, 62, 19]
# >>> a.sort()
# >>> a[0]
# 19
# 
# i ++)
# >>> a = [38, 21, 53, 62, 19]
# >>> min(a)
# 19
# 
# ii)
# >>> a = [38, 21, 53, 62, 19]
# >>> largest = a[0]
# >>> for i in a:
# ...     if i > largest:
# ...         largest = i
# ...
# >>> largest
# 62
# 
# ii +)
# >>> a = [38, 21, 53, 62, 19]
# >>> a.sort(reverse=True)
# >>> a[0]
# 62
# 
# ii ++)
# >>> a = [38, 21, 53, 62, 19]
# >>> max(a)
# 62
# 
# [리스트 컴프리헨션(list comprehension)]
# :리스트 안에 식, for반복문, if조건문 지정 가능.
# 1] 리스트 + 식
# 
# i)[식 for 변수 in 리스트](성능은 얘가 더 좋음)
# ii)list(식 for 변수 in 리스트)
# 
# >>> a = [i for i in range(10)]        # 0부터 9까지 숫자를 생성하여 리스트 생성
# >>> a
# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
# >>> b = list(i for i in range(10))    # 0부터 9까지 숫자를 생성하여 리스트 생성
# >>> b
# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
# 
# 2] 리스트 + if조건문
# 
# i)[식 for 변수 in 리스트 if 조건식]
# ii)list(식 for 변수 in 리스트 if 조건식)
# 
# >>> a = [i for i in range(10) if i % 2 == 0]    # 0~9 숫자 중 2의 배수인 숫자(짝수)로 리스트 생성
# >>> a
# [0, 2, 4, 6, 8]
# 
# 3]for반복문과 if조건문을 여러 번 사용하기
# [식 for 변수1 in 리스트1 if 조건식1     for 변수2 in 리스트2 if 조건식2     ...     for 변수n in 리스트n if 조건식n]
#  
# list(식 for 변수1 in 리스트1 if 조건식1         for 변수2 in 리스트2 if 조건식2         ...         for 변수n in 리스트n if 조건식n)
# 
# 4]리스트 + map
# 
# i)list(map(함수, 리스트))
# 
# >>> a = [1.2, 2.5, 3.7, 4.6]
# >>> a = list(map(int, a))
# >>> a
# [1, 2, 3, 4]
# 
# >>> a = list(map(str, range(10)))
# >>> a
# ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
# 
# ii)tuple(map(함수, 튜플))
# 
# 5] input().split()과 map
# 
# i) input().split()
# >>> a = input().split()
# 10 20 (입력)
# >>> a
# ['10', '20']
# 
# ii) map(int,input().split())
# >>> a = map(int, input().split())
# 10 20 (입력)
# >>> a
# <map object at 0x03DFB0D0>
# >>> list(a)
# [10, 20]
# 
# 6]튜플 이용
# i)튜플에서 특정 값의 인덱스 구하기
# index(값):튜플에서 특정 값의 인덱스 구하기
# 
# >>> a = (38, 21, 53, 62, 19, 53)
# >>> a.index(53)
# 2
# 
# ii)특정 값의 개수 구하기
# count(값): 튜플에서 특정 값의 개수 구하기
# 
# >>> a = (10, 20, 30, 15, 20, 40)
# >>> a.count(20)
# 2
# 
# iii)for반복문으로 요소 출력
# 
# >>> a = (38, 21, 53, 62, 19)
# >>> for i in a:
# ...     print(i, end=' ')
# ...
# 38 21 53 62 19
# 
# iv)튜플 표현식 사용하기
# 
# tuple(식 for 변수 in 리스트 if 조건식)
# 
# >>> a = tuple(i for i in range(10) if i % 2 == 0)
# >>> a
# (0, 2, 4, 6, 8)
# 
# v)tuple에서 map사용하기(리스트와 방식이 같음)
# 
# >>> a = (1.2, 2.5, 3.7, 4.6)
# >>> a = tuple(map(int, a))
# >>> a
# (1, 2, 3, 4)
# 
# vi)튜플에서 가장 작은 수, 가장 큰 수 , 합계 구하기
# >>> a = (38, 21, 53, 62, 19)
# >>> min(a)
# 19
# >>> max(a)
# 62
# >>> sum(a)
# 193
# 
# [2차원 리스트 사용]
# 
# 1)2차원 리스트의 요소에 접근
# https://dojang.io/pluginfile.php/13705/mod_page/content/4/023002.png
# 
# i) 리스트 = [[값, 값], [값, 값], [값, 값]]
# 
# ii) -리스트[세로인덱스][가로인덱스]
#     -리스트[세로인덱스][가로인덱스] = 값
#     
# 2)반복문으로 2차원 리스트의 요소 모두 출력
# 
# i)for반복문을 한 번만 사용하기
# >>> a = [[10, 20], [30, 40], [50, 60]]
# >>> for x, y in a:    # 리스트의 가로 한 줄(안쪽 리스트)에서 요소 두 개를 꺼냄
# ...     print(x, y)
# ...
# 10 20
# 30 40
# 50 60
# 
# ii)for 반복문을 두 번 사용하기
# https://dojang.io/pluginfile.php/13706/mod_page/content/3/023004.png
# 
# a = [[10, 20], [30, 40], [50, 60]]
#  
# for i in a:        # a에서 안쪽 리스트를 꺼냄
#     for j in i:    # 안쪽 리스트에서 요소를 하나씩 꺼냄
#         print(j, end=' ')
#     print()
# 
# iii)for 와 range사용하기
# 
# a = [[10, 20], [30, 40], [50, 60]]
#  
# for i in range(len(a)):            # 세로 크기
#     for j in range(len(a[i])):     # 가로 크기
#         print(a[i][j], end=' ')
#     print()
#     
# iv) while 반복문 한 번 사용
# 
# a = [[10, 20], [30, 40], [50, 60]]
#  
# i = 0
# while i < len(a):    # 반복할 때 리스트의 크기 활용(세로 크기)
#     x, y = a[i]      # 요소 두 개를 한꺼번에 가져오기
#     print(x, y)
#     i += 1           # 인덱스를 1 증가시킴
#     
# v) while 반복문 두 번 사용
# 
# a = [[10, 20], [30, 40], [50, 60]]
#  
# i = 0
# while i < len(a):           # 세로 크기
#     j = 0
#     while j < len(a[i]):    # 가로 크기
#         print(a[i][j], end=' ')
#         j += 1              # 가로 인덱스를 1 증가시킴
#     print()
#     i += 1                  # 세로 인덱스를 1 증가시킴
#     
#  [반복문으로 리스트 만들기]
#  
#  1)for 반복문으로 1차원 리스트 만들기
#  
#  a = []    # 빈 리스트 생성
#  
# for i in range(10):
#     a.append(0)    # append로 요소 추가
#  
# print(a)
# 
# 2)for 반복문으로 2차원 리스트 만들기
# 
# a = []    # 빈 리스트 생성
#  
# for i in range(3):
#     line = []              # 안쪽 리스트로 사용할 빈 리스트 생성
#     for j in range(2):
#         line.append(0)     # 안쪽 리스트에 0 추가
#     a.append(line)         # 전체 리스트에 안쪽 리스트를 추가
#  
# print(a)
# 
# 3)리스트 표현식으로 2차원 리스트 만들기
# >>> a = [[0 for j in range(2)] for i in range(3)]
# >>> a
# [[0, 0], [0, 0], [0, 0]]
# 
# 4)3차원 리스트
# -리스트 = [[[값, 값], [값, 값]], [[값, 값], [값, 값]], [[값, 값], [값, 값]]]
# -리스트[높이인덱스][세로인덱스][가로인덱스]
# -리스트[높이인덱스][세로인덱스][가로인덱스] = 값
# 
# [문자열 응용하기]
# 
# 1)문자열 조작하기
# :메서드로 한다.
# 
# 2)문자열 바꾸기
# : replace('바꿀 문자열', '새 문자열')
# 
# 3)문자 바꾸기
# str.maketrans('바꿀 문자', ' 새 문자')
# 
# 4)문자열 분리
# split(): 공백 기준으로 분리
# 
# 5)구분자 문자열과 문자열 리스트 연결
# join(리스트)
# :서로 요소 연결
# >>> ' '.join(['apple', 'pear', 'grape', 'pineapple', 'orange'])
# 'apple pear grape pineapple orange'
# 
# 6)소문자를 대문자로 바꾸기
# upper()
# 7)대문자를 소문자로 바꾸기
# lower()
# 
# 8)왼쪽 공백 삭제
# lstrip()
# 9)오른쪽 공백 삭제
# rstrip()
# 10)양쪽 공백 삭제
# strip()
# 11)왼쪽 특정 문자 삭제
# lstrip('삭제할 문자들')
# 12)오른쪽 특정 문자 삭제
# rstrip('삭제할 문자들')
# 
# 13)양쪽 특정 문자 삭제
# strip('삭제할 문자들')
# 
# 14)문자열 왼쪽 정렬
# ljust(길이)
# 15)문자열 오른쪽 정렬
# rjust(길이)
# 16)가운데 정렬
# center(길이)
# 17)메서드 체이닝
# :메서드를 줄줄이 연결.
# >>> 'python'.rjust(10).upper()
# '    PYTHON'
# 
# 18)문자열 왼쪽에 0채우기
# zfill(길이)
# 19)문자열 위치 찾기
# find('찾을 문자열')
# 
# 20오른쪽에서 부터 문자열 위치 찾기
# rfind('찾을 문자열')
# 
# 21)문자열 위치 찾기
# index('찾을 문자열')
# 
# 22)오른쪽에서부터 문자열 위치 찾기
# rindex('찾을 문자열')
# 23)문자열 개수 세기
# count('문자열')
# 
# 
# [문자열 서식 지정자와 포메팅 사용하기]
# 
# 1)서식 지정자로 문자열 넣기
# '%s' % '문자열'
# >>> 'I am %s.' % 'james'
# 'I am james.'
# 
# 2)서식 지정자로 숫자 넣기
# '%d' % 숫자
# >>> 'I am %d years old.' % 20
# 'I am 20 years old.'
# 
# 3)서식 지정자로 소수점 표현하기
# '%f' % 숫자
# >>> '%f' % 2.3
# '2.300000'
# 
# '%.자릿수f' % 숫자
# >>> '%.2f' % 2.3
# '2.30'
# >>> '%.3f' % 2.3
# '2.300'
# 
# 4)서식 지정자로 문자열 정렬
# %길이s
# >>> '%10s' % 'python'
# '    python'
# 
# %-길이s
# >>> '%-10s' % 'python'
# 'python    '
# 
# 5)서식 지정자로 문자열 안에 값 여러 개 넣기
# 
# '%d %s' % (숫자, '문자열')
# >>> 'Today is %d %s.' % (3, 'April')
# 'Today is 3 April.'
# 
# 6)format메서드 사용하기
# 
# '{인덱스}'.format(값)
# >>> 'Hello, {0}'.format('world!')
# 'Hello, world!'
# >>> 'Hello, {0}'.format(100)
# 'Hello, 100'
# 
# 7)format메서드로 값을 여러 개 넣기
# >>> 'Hello, {0} {2} {1}'.format('Python', 'Script', 3.6)
# 'Hello, Python 3.6 Script'
# 
# 8)format메서드로 같은 값을 여러 개 넣기
# >>> '{0} {0} {1} {1}'.format('Python', 'Script')
# 'Python Python Script Script'
# 
# 9)format메서드에서 인덱스 생략
# >>> 'Hello, {} {} {}'.format('Python', 'Script', 3.6)
# 'Hello, Python Script 3.6'
# 
# 10)format메서드에서 인덱스 대신 이름 지정
# >>> 'Hello, {language} {version}'.format(language='Python', version=3.6)
# 'Hello, Python 3.6'
# 
# 11)문자열포매팅에 변수를 그대로 사용하기
# 
# >>> language = 'Python'
# >>> version = 3.6
# >>> f'Hello, {language} {version}'
# 'Hello, Python 3.6'
# 
# 12)format메서드로 문자열 정렬하기
# 
# '{인덱스:<길이}'.format(값)
# >>> '{0:<10}'.format('python')
# 'python'    
# 
# '{인덱스:>길이}'.format(값)
# >>> '{0:>10}'.format('python')
# '    python'
# 
# >>> '{:>10}'.format('python')
# '    python'
# 
# 13)숫자 개수 맞추기
# 
# '%0개수d' % 숫자
# '{인덱스:0개수d'}'.format(숫자)
# >>> '%03d' % 1
# '001'
# >>> '{0:03d}'.format(35)
# '035'
# 
# '%0개수.자릿수f' % 숫자
# '{인덱스:0개수.자릿수f'}.format(숫자)
# >>> '%08.2f' % 3.6
# '00003.60'
# >>> '{0:08.2f}'.format(150.37)
# '00150.37'
# 
# 14)채우기와 정렬을 조합해서 사용하기
# '{인덱스:[[채우기]정렬][길이][.자릿수][자료형]}'
# >>> '{0:0<10}'.format(15)    # 길이 10, 왼쪽으로 정렬하고 남는 공간은 0으로 채움
# '1500000000'
# 
# >>> '{0:0>10}'.format(15)    # 길이 10, 오른쪽으로 정렬하고 남는 공간은 0으로 채움
# '0000000015'
# 
# >>> '{0:0>10.2f}'.format(15)    # 길이 10, 오른쪽으로 정렬하고 소수점 자릿수는 2자리
# '0000015.00'
# 
# >>> '{0: >10}'.format(15)    # 남는 공간을 공백으로 채움
# '        15'
# >>> '{0:>10}'.format(15)     # 채우기 부분을 생략하면 공백이 들어감
# '        15'
# >>> '{0:x>10}'.format(15)    # 남는 공간을 문자 x로 채움
# 'xxxxxxxx15'
참고 | 구두점을 간단하게 삭제하기
string 모듈의 punctuation에는 모든 구두점이 들어있습니다. 다음과 같이 strip 메서드에 string.punctuation을 넣으면 문자열 양쪽의 모든 구두점을 간단하게 삭제할 수 있습니다.

>>> import string
>>> ', python.'.strip(string.punctuation)
' python'
>>> string.punctuation
'!"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~'
만약 공백까지 삭제하고 싶다면 string.punctuation에 공백 ' '을 연결해서 넣어주면 되겠죠?

>>> ', python.'.strip(string.punctuation + ' ')
'python'
물론 메서드 체이닝을 활용해도 됩니다.

>>> ', python.'.strip(string.punctuation).strip()
'python'
# 참고 | 금액에서 천단위로 콤마 넣기
# 숫자 중에서 금액은 천단위로 ,(콤마)를 넣죠? 파이썬에서는 간단하게 천단위로 콤마를 넣을 수 있습니다.
# 
# 먼저 format 내장 함수를 사용하는 방법입니다. 다음과 같이 format 함수에 숫자와 ','를 넣어줍니다.
# 
# format(숫자, ',')
# 
# >>> format(1493500, ',')
# '1,493,500'
# format 함수는 서식 지정자와 함께 사용할 수 있습니다. 다음은 콤마를 넣은 숫자를 오른쪽 정렬합니다.
# 
# >>> '%20s' % format(1493500, ',')    # 길이 20, 오른쪽으로 정렬
# '           1,493,500'
# 포매팅에서 콤마를 넣으려면 다음과 같이 :(콜론)뒤에 ,(콤마)를 지정하면 됩니다.
# 
# >>> '{0:,}'.format(1493500)
# '1,493,500'
# 만약 정렬을 하고 싶다면 정렬 방향과 길이 뒤에 콤마를 지정해줍니다.
# 
# >>> '{0:>20,}'.format(1493500)     # 길이 20, 오른쪽으로 정렬
# '           1,493,500'
# >>> '{0:0>20,}'.format(1493500)    # 길이 20, 오른쪽으로 정렬하고 남는 공간은 0으로 채움
# '000000000001,493,500'

# 중괄호 출력하기
# { } 중괄호 자체를 출력할 때는 {{, }}처럼 중괄호를 두 번 사용하면 됩니다.
# 
# >>> '{{ {0} }}'.format('Python')
# '{ Python }'

# 참고 | 자릿수가 다른 숫자 출력하기
# 문자열 오른쪽 정렬은 자릿수가 다른 숫자를 출력할 때 유용합니다. %d와 %f도 숫자와 조합하여 오른쪽으로 정렬할 수 있습니다.
# 
# %길이d
# 
# >>> '%10d' % 150
# '       150'
# >>> '%10d' % 15000
# '     15000'
# 실수는 다음과 같이 .(점) 앞에 정렬할 길이를 지정하고, 점 뒤에 소수점 이하 자릿수를 지정합니다.
# 
# %길이.자릿수f
# 
# >>> '%10.2f' % 2.3
# '      2.30'
# >>> '%10.2f' % 2000.3
# '   2000.30'

# 참고 | 리스트로 스택과 큐 만들기
# 지금까지 알아본 리스트의 메서드로 스택(stack)과 큐(queue)를 만들 수 있습니다. 다음과 같이 append와 pop을 호출하는 그림을 90도 돌리면 스택의 모습이 됩니다.
# 
# 여기서 pop() 대신 pop(0)을 사용하면 큐가 됩니다.
# 
# 물론 append(), pop(0)이 아닌 insert(0, 요소), pop()을 사용해서 추가/삭제 방향을 반대로 해도 큐가 됩니다.
# 
# 파이썬에서 스택은 리스트를 그대로 활용해도 되지만, 큐는 좀 더 효율적으로 사용할 수 있도록 덱(deque, double ended queue)이라는 자료형을 제공합니다. 덱은 양쪽 끝에서 추가/삭제가 가능한 자료 구조입니다.
# 
# deque(반복가능한객체)
# 
# >>> from collections import deque    # collections 모듈에서 deque를 가져옴
# >>> a = deque([10, 20, 30])
# >>> a
# deque([10, 20, 30])
# >>> a.append(500)    # 덱의 오른쪽에 500 추가
# >>> a
# deque([10, 20, 30, 500])
# >>> a.popleft()     # 덱의 왼쪽 요소 하나 삭제
# 10
# >>> a
# deque([20, 30, 500])
# deque의 append는 덱의 오른쪽에 요소를 추가하고, popleft는 덱의 왼쪽 요소를 삭제합니다. 반대로 appendleft는 덱의 왼쪽에 요소를 추가하고, pop으로 덱의 오른쪽 요소를 삭제할 수도 있습니다.

# 참고 | 리스트가 비어 있는지 확인하기
# 리스트(시퀀스 객체)가 비어 있는지 확인하려면 어떻게 해야 할까요? 방법은 간단합니다. 리스트는 len 함수로 길이를 구할 수 있죠? 이걸 if 조건문으로 판단하면 리스트가 비어 있는지 확인할 수 있습니다.
# 
# if not len(seq):    # 리스트가 비어 있으면 True
# if len(seq):        # 리스트에 요소가 있으면 True
# 하지만 파이썬에서는 이 방법보다 리스트(시퀀스 객체)를 바로 if 조건문으로 판단하는 방법을 권장합니다(PEP 8).
# 
# if not seq:    # 리스트가 비어 있으면 True
# if seq:        # 리스트에 내용이 있으면 True
# 특히 리스트가 비어 있는지 확인하는 방법은 리스트의 마지막 요소에 접근할 때 유용하게 사용할 수 있습니다. 리스트의 마지막 요소에 접근할 때는 인덱스를 -1로 지정하면 되죠?
# 
# >>> seq = [10, 20, 30]
# >>> seq[-1]
# 30
# 만약 리스트가 비어 있을 경우에는 인덱스를 -1로 지정하면 에러가 발생합니다.
# 
# >>> a = []
# >>> a[-1]
# Traceback (most recent call last):
#   File "<pyshell#3>", line 1, in <module>
#     a[-1]
# IndexError: list index out of range
# 이때는 if 조건문을 활용하여 리스트에 요소가 있을 때만 마지막 요소를 가져오면 됩니다.
# 
# seq = []
# if seq:               # 리스트에 요소가 있는지 확인
#     print(seq[-1])    # 요소가 있을 때만 마지막 요소를 가져옴

# 참고 | 2차원 튜플
# 2차원 리스트가 있으면 2차원 튜플도 있겠죠? 다음과 같이 튜플 안에 튜플을 넣는 방식, 튜플 안에 리스트를 넣는 방식, 리스트 안에 튜플을 넣는 방식 등이 가능합니다.
# 
# 튜플 = ((값, 값), (값, 값), (값, 값))
# 
# 튜플 = ([값, 값], [값, 값], [값, 값])
# 
# 리스트 = [(값, 값), (값, 값), (값, 값)]
# 
# a = ((10, 20), (30, 40), (50, 60))    # 튜플 안에 튜플을 넣은 2차원 튜플
# b = ([10, 20], [30, 40], [50, 60])    # 튜플 안에 리스트를 넣음
# c = [(10, 20), (30, 40), (50, 60)]    # 리스트 안에 튜플을 넣음
# 튜플은 내용을 변경할 수 없으므로 a는 안쪽과 바깥쪽 모두 요소를 변경할 수 없습니다. b는 안쪽 리스트만 요소를 변경할 수 있고, c는 바깥쪽 리스트만 요소를 변경할 수 있습니다.
# 
# a[0][0] = 500        # 안쪽 튜플은 변경할 수 없음. TypeError 발생
# a[0] = (500, 600)    # 바깥쪽 튜플은 변경할 수 없음. TypeError 발생
# b[0][0] = 500        # 안쪽 리스트는 변경할 수 있음
# b[0] = (500, 600)    # 바깥쪽 튜플은 변경할 수 없음. TypeError 발생
# c[0][0] = 500        # 안쪽 튜플은 변경할 수 없음. TypeError 발생
# c[0] = (500, 600)    # 바깥쪽 리스트는 변경할 수 있음
