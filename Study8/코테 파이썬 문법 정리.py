#!/usr/bin/env python
# coding: utf-8

# [수 자료형]
# 
# 1.정수형
# : 대다수의 코테에서 나오는 입출력 데이터로 양,음,0을 말한다.
# 
# 2.실수형
# :소수점 아래의 데이터 포함하는 자료형이고 
#     소수부나 정수부의 소수가 0이면 생략 가능하다.
# 2-1) 지수 표현
#   유효숫자e**지수 = 유효숫자 * 10**지수
#   -->최단 경로 문제에서 도달할 수 없는 노드의 
# 최단거리 무한(INF)로 설정.
# 2-2) 부동 소수점 방식(IEEE754)
# 2-3) round()함수
# : 소수점 값 비교 시, 이 함수를 쓰면 원하는 결과를 얻을 수 있다.
# : 호출 시, 인자 넣기. (첫 번째 인자: 실수형 데이터, 
#                 두번 째: 반 올림위치.
# :round(실수형 데이터, 반올림 위치)
# 
# 3. 수 자료형의 연산
#  /: 나누기
#  %: 나머지값 구하기
#  //: 몫 구하기
#  **: 거듭제곱하기
#  
# [리스트 자료형]
# 1. 리스트(배열,테이블 이라고도 불림)
# : 여러 개의 데이터를 연속적으로 담아서 처리하게 사용 가능한 것
# 1-1)외부적기능
# : 프로그래밍 언어처럼 배열기능 포함
# 1-2)내부적 기능
# : 연결리스트 자료구조 채택. append(),remove()등의 메서드 지원.
# 2. 리스트 만들기
# : 대괄호([])안에 원소 넣어 초기화, 쉼표(,)로 원소 구분, 원소 접근할 땐
# 인덱스 값을 괄호 안에 넣는다. 인덱스는0부터 시작하고 
# list(),[]-->빈 리스트 만들기
# 3.크기가 N인 1차원 리스트 초기화
# n =10
# a = [0] * n
# print(a)
# 4.리스트의 인덱싱
# : 인덱싱 값--> 리스트 특정 원소 접근 하는 것을 인덱싱이라고 한다.
# 인덱스값 = 양수: 원소를 순차적 탐색
# 인덱스값 = 음수: 원소를 역순으로 탐색
# 5.리스트의 슬라이싱
# : 연속적인 위치를 갖는 원소들 가져오기.
# 콜론(:)을 넣어서 시작 인덱스와 (끝 인덱스 -1) 설정 가능.
# 6. 리스트 컴프리헨션
# : 리스트를 초기화하는 방법
#     :대괄호([])안에 조건문과 반복문을 넣어 리스트 초기화 가능
# 6-1) 2차원 리스트 초기화
# : N * M크기의 2차원 리스트 초기화
# n = 3
# m = 3
# array = [[0]* m for _ in range(n)]
# print(array)
# 7. 리스트 관련 기타 메서드
# 7-1)함수명 사용법
# 
# 함수명	  사용법         	 설명	                              시간복잡도
# append() 변수명.append()   리스트에 원소를 하나 삽입할 때 사용 O(1)
# sort()   변수명.sort()     기본 정렬 기능으로 오름차순 정렬    O(NlogN)
# sort()   변수명.sort(reverse=True) 내림차순으로 정렬.         O(NlogN)
# reverse()변수명.reverse()  리스트의 원소 순서 모두 뒤집기      O(N)
# insert() insert(삽입할 위치 인덱스 , 삽입할 값) 특정한 인덱스 위치에 원소 삽입 때 사용  O(N)
# count() 변수명.count(특정 값) 리스트에서 특정한 값을 가지는 데이터의 개수 셀 때 사용  O(N)
# remove() 변수명.remove(특정 값) 특정한 값을 갖는 원소제거, 중복 값은 하나만 제거. O(N)
# 
# * 중요 함수메서드:insert(),append(),remove() *
#     insert(): 원소의 개수가 N개이면, 시간 복잡도 O(N).리스트 원소 위치 조정
#         --> 남발할 경우 시간초과 나온다.
#     remove():insert()와 마찬가지로 O(N)으로 삭제 후 위치 조정.
#     -->해결법
#     a = [1, 2, 3, 4, 5, 5, 5]
#     remove_set = {3,5}
#     
#     result = [i for i in a if i not in remove_set]
#     print(result)
# 
# [문자열 자료형]
# 1. 문자열 초기화
# :문자열 안에 있는 큰 따옴표(") , 작은 따옴표(')이용.
#   큰 따옴표가 작은 따옴표 포함 가능하고 작은 따옴표가 큰 따옴표 포함.
#   백  슬래시(\)를 사용하면, 원하는 만큼 따옴표들 이용가능.
# 
# 2. 문자열 연산
# :문자열 변수에 + 이용하면 가능
# : 문자열 * 횟수 가능
# 
# [튜플 자료형]
# i)튜플은 한 번 선언된 값을 변경할 수 없다.
# ii) 소괄호() 이용한다.
# iii)상대적 공간 효율성. 원소의 성질이 서로 다를 때 주로 이용.
# iv) 다익스트라 최단 경로 알고리즘에서 서로 다른 성질의 데이터를
# ( , )의 형태로 함께 튜플로 묶어서 관리.
# 
# [사전 자료형]
# : 키와 값의 쌍을 데이터로 가지는 자료형이다.
# --> 사전 만들 때 이용이 잘됨.
# 이유: 해시 테이블 ->검색 수정 빠르게(O(1))로 됨.
# 
# +활용 IN 코테): 학생 번호 1~10000000까지 구성되어 있는 상황에서 최대
# 10,000명의 학생 선택.
# --> '원소 in 사전' 형태로 사용.(리스트나 튜플에서도 응용 가능)
# 
# ++)사전 자료형 관련 함수
# keys()함수: 키 데이터만 뽑음
# values()함수: 값 데이터만 뽑아서 리스트 이용
# 
# [집합 자료형]
# 1. 집합 자료형 소개
# i)중복 허용X
# ii)순서가 없다.-->인덱싱으로 값을 얻을 수 없다.
# iii)키는 존재X, 값 데이터만 남음
# iv)시간 복잡도:O(1)
# V)집합 자료형 초기화
# - set()함ㅁ수
# - 중괄호({})
# - 각 원소를 콤마(,)기준으로 구분.
# 
# 2. 집합 자료형의 연산
#   .
#     
